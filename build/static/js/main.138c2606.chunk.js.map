{"version":3,"sources":["providers/AppSettingsProvider.js","providers/IpfsProvider.js","components/IpfsRoute.js","components/link-button.js","components/Header.js","components/PageContainer.js","views/Folder/index.js","views/Home.js","hooks/use-ipfs-id.js","views/Settings.js","views/App.js","providers/GlobalProviders.js","const.js","index.js"],"names":["IpfsSettingsContext","React","createContext","useAppSettings","useContext","AppSettingsProvider","children","useLocalStorage","setup","setSetup","clearSetup","apiUrl","setApiUrl","clearApiUrl","gateway","setGateway","clearGateway","thumbor","setThumbor","clearThumbor","rootFolder","setRootFolder","clearRootFolder","update","useUpdate","useEvent","window","clear","useCallback","context","Provider","value","IpfsContext","useIpfs","IpfsProvider","repo","ipfsMode","state","useAsync","a","console","info","ipfsHttpClient","url","client","id","log","useMemo","error","loading","ipfs","useEffect","IpfsRoute","direct","props","to","LinkButton","as","Link","Header","w","padding","justifyContent","action","placeholder","name","PageContainer","CurrentFolder","imageTypes","FolderPage","pathname","useLocation","path","replace","list","files","ls","entries","entry","push","contents","subFolders","filter","type","images","file","test","map","src","cid","toString","thumbnail","encodeURIComponent","thumbnailWidth","thumbnailHeight","dir","enableImageSelection","FolderView","HomeView","loadingIpfs","useIpfsId","SettingsPage","settings","ipfsLoading","useState","handleSubmit","e","preventDefault","onClick","onSubmit","spacing","onChange","target","SettingsView","App","component","GlobalProviders","root","document","createElement","body","appendChild","ReactDOM","render","getElementById"],"mappings":"4XAGMA,EAAsBC,IAAMC,cAAc,IAEnCC,EAAiB,kBAAMC,qBAAWJ,IAElCK,EAAsB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACZC,YAAgB,SADJ,mBAC3CC,EAD2C,KACpCC,EADoC,KAC1BC,EAD0B,OAETH,YAAgB,gBAFP,mBAE3CI,EAF2C,KAEnCC,EAFmC,KAExBC,EAFwB,OAGNN,YAAgB,eAAgB,mBAH1B,mBAG3CO,EAH2C,KAGlCC,EAHkC,KAGtBC,EAHsB,OAINT,YAAgB,eAJV,mBAI3CU,EAJ2C,KAIlCC,EAJkC,KAItBC,EAJsB,OAKGZ,YAAgB,YAAa,cALhC,mBAK3Ca,EAL2C,KAK/BC,EAL+B,KAKhBC,EALgB,KAO5CC,EAASC,cACfC,YAAS,UAAWF,EAAQG,QAE5B,IAAMC,EAAQC,uBAAY,WACzBlB,IACAG,IACAS,IACAH,MACE,CAACT,EAAYG,EAAaS,EAAiBH,IAExCU,EAAU,CACfrB,QAAOC,WAAUC,aACjBC,SAAQC,YAAWC,cACnBC,UAASC,aAAYC,eACrBC,UAASC,aAAYC,eACrBC,aAAYC,gBAAeC,kBAC3BK,SAGD,OACC,cAAC3B,EAAoB8B,SAArB,CAA8BC,MAAOF,EAArC,SAA+CvB,KC5BpC0B,EAAc/B,IAAMC,gBAEpB+B,EAAU,kBAAM7B,qBAAW4B,IAE3BE,EAAe,SAAC,GAAwB,IAAtB5B,EAAqB,EAArBA,SAAU6B,EAAW,EAAXA,KAAW,EACfhC,IAA5BiC,EAD2C,EAC3CA,SAAU5B,EADiC,EACjCA,MAAOG,EAD0B,EAC1BA,OAOnB0B,EAAQC,YAAQ,sBAAE,gCAAAC,EAAA,yDAClB/B,EADkB,yCAEf,MAFe,WAKnBG,EALmB,wBAMtB6B,QAAQC,KAAK,6BANS,SAODC,IAAe,CAACC,IAAKhC,IAPpB,cAOhBiC,EAPgB,gBASHA,EAAOC,KATJ,uBASfA,EATe,EASfA,GACPL,QAAQM,IAAR,uBAA4BD,IAVN,kBAYfD,GAZe,iCAiDf,MAjDe,4CAmDrB,CAACT,EAAMxB,EAAQyB,EAAU5B,IAEtBqB,EAAUkB,mBAAQ,iBAAO,CAC9BC,MAAOX,EAAMW,MACbC,QAASZ,EAAMY,QACfC,KAAMb,EAAMN,SACT,CAACM,IAQL,OANAc,qBAAU,WACLtB,EAAQoB,SAAWvB,OAAOwB,OAASrB,EAAQqB,OAC9CxB,OAAOwB,KAAOrB,EAAQqB,QAErB,CAACrB,IAGH,cAACG,EAAYF,SAAb,CAAsBC,MAAOF,EAA7B,SACEvB,KCjFS8C,EAAY,SAAC,GAAgD,IAA/C9C,EAA8C,EAA9CA,SAA8C,IAApC+C,cAAoC,MAA3B,YAA2B,EAAXC,EAAW,uCAChDrB,IAAjBgB,EADiE,EACjEA,QAEP,OAHwE,EACxDC,KAmBf,cAAC,IAAD,2BAAWI,GAAX,aAAmBhD,KAhBhB2C,EAED,oDAKA,qCACC,gEACA,cAAC,IAAD,CAAMM,GAAIF,EAAV,gC,wECZQG,EAAa,SAAC,GAAD,IAAGlD,EAAH,EAAGA,SAAagD,EAAhB,mCACzB,cAAC,IAAD,yBAAQG,GAAIC,KAAUJ,GAAtB,aAA8BhD,MCDlBqD,EAAS,kBACrB,cAAC,IAAD,CAAKF,GAAG,MAAMG,EAAE,OAAOC,QAAQ,IAA/B,SACC,eAAC,IAAD,CAAMC,eAAe,gBAArB,UACC,eAAC,IAAD,WACC,cAAC,EAAD,CAAYP,GAAG,IAAf,kBACA,cAAC,EAAD,CAAYA,GAAG,UAAf,oBACA,cAAC,EAAD,CAAYA,GAAG,YAAf,yBAED,sBAAMQ,OAAO,SAAb,SACC,cAAC,IAAD,CAAOC,YAAY,aAAaC,KAAK,cCX5BC,EAAgB,SAAC,GAAD,IAAE5D,EAAF,EAAEA,SAAF,OAC5B,qCACC,cAAC,EAAD,IACA,8BACEA,QCEE6D,EAAgBlE,IAAMC,cAAc,IACpCkE,EAAa,oBAENC,EAAa,WAAO,IACxBnB,EAASjB,IAATiB,KACAoB,EAAaC,cAAbD,SAFuB,EAGFnE,IAArBW,EAHuB,EAGvBA,QAASG,EAHc,EAGdA,QACXuD,EAAOF,EAASG,QAAQ,YAAa,KAAO,IAJnB,EAMgBnC,YAAQ,sBAAC,4CAAAC,EAAA,sDACjDmC,EAAOxB,EAAKyB,MAAMC,GAAGJ,GAErBK,EAAU,GAHuC,iCAI/BH,GAJ+B,yHAIxCI,EAJwC,EAKtDD,EAAQE,KAAKD,GALyC,0UAOhDD,GAPgD,4EAQrD,CAAC3B,EAAMsB,IAdqB,IAMxBzC,MAAOiD,OANiB,MAMN,GANM,EAgBzBC,GAhByB,EAMFhC,QANE,EAMOD,MAUnBD,mBAAQ,kBAAMiC,EAASE,QAAO,SAAAJ,GAAK,MAAmB,cAAfA,EAAMK,UAAuB,CAACH,KAClFL,EAAQ5B,mBAAQ,kBAAMiC,EAASE,QAAO,SAAAJ,GAAK,MAAmB,SAAfA,EAAMK,UAAkB,CAACH,IACxEI,EAASrC,mBAAQ,WACtB,OAAO4B,EACLO,QAAO,SAAAG,GAAI,OAAIjB,EAAWkB,KAAKD,EAAKpB,SACpCsB,KAAI,SAAAF,GACJ,IAAMG,EAAG,UAAM1E,EAAN,iBAAsBuE,EAAKI,IAAIC,YAExC,MAAQ,CACPF,MACAG,UAAW1E,EAAO,UAAMA,EAAN,2BAAgC2E,mBAAmBJ,IAAS,KAC9EK,eAAgB,EAChBC,gBAAiB,QAGlB,CAACnB,IAEJ,OACC,eAACR,EAAcrC,SAAf,CAAwBC,MAAOyC,EAA/B,UACC,6BACES,EAAWM,KAAI,SAAAQ,GAAG,OAClB,6BACC,cAAC,IAAD,CAAMxC,GAAE,UAAKe,EAAL,YAAiByB,EAAI9B,MAA7B,SAAsC8B,EAAI9B,QADlC8B,EAAIN,IAAIC,iBAKnB,cAAC,IAAD,CAASN,OAAQA,EAAQY,sBAAsB,QAKrCC,EAAa,kBACzB,cAAC,EAAD,UACC,cAAC,EAAD,OCxDK,IAAMC,EAAW,WAAO,IACvBrD,ECHD,WAAqB,IAAD,EACWZ,IAArBkE,EADU,EACnBlD,QAAsBC,EADH,EACGA,KADH,EAGGZ,YAAQ,sBAAC,sBAAAC,EAAA,0DAClCW,EADkC,gCAEvBA,EAAKL,KAFkB,mFAInC,CAACK,IAJGD,EAHmB,EAGnBA,QAMP,MAAO,CACNA,QAASkD,GAAelD,EACxBJ,GAXyB,EAGVd,ODAHqE,GAANvD,GAEP,OACC,cAAC,EAAD,UACC,6BAAKA,EAAE,kBAAcA,EAAGA,IAAjB,6B,mCEHGwD,EAAe,WAC3B,IAAMC,EAAWnG,IAEDoG,EAAetE,IAAxBgB,QAH0B,EAKLuD,mBAASF,EAAS3F,QALb,mBAK1BA,EAL0B,KAKlBC,EALkB,OAMG4F,mBAASF,EAASlF,YANrB,mBAM1BA,EAN0B,KAMdC,EANc,OAOHmF,mBAASF,EAASxF,SAPf,mBAO1BA,EAP0B,KAOjBC,EAPiB,OAQHyF,mBAASF,EAASrF,SARf,mBAQ1BA,EAR0B,KAQjBC,EARiB,KAU3BuF,EAAe7E,uBAAY,SAAC8E,GACjCA,EAAEC,iBAEFL,EAAS1F,UAAUD,GACnB2F,EAASvF,WAAWD,GACpBwF,EAASjF,cAAcD,GACvBkF,EAASpF,WAAWD,GACpBqF,EAAS7F,UAAS,KAChB,CAACE,EAAQ2F,EAAUlF,EAAYN,EAASG,IAE3C,OAAGsF,EAED,qCACC,oDACA,cAAC,IAAD,CAAQK,QAASN,EAAS3E,MAA1B,+BAMF,sBAAMkF,SAAUJ,EAAhB,SACC,eAAC,IAAD,CAAQK,QAAS,EAAjB,UACC,eAAC,IAAD,CAAajE,GAAG,UAAhB,UACC,cAAC,IAAD,2BACA,cAAC,IAAD,CACCd,MAAK,OAAEjB,QAAF,IAAEA,IAAW,GAClBiG,SAAU,SAAAL,GAAC,OAAI3F,EAAW2F,EAAEM,OAAOjF,UAEpC,cAAC,IAAD,8DAED,cAAC,IAAD,IACA,eAAC,IAAD,CAAac,GAAG,UAAhB,UACC,cAAC,IAAD,4BACA,cAAC,IAAD,CACCd,MAAK,OAAEpB,QAAF,IAAEA,IAAU,GACjBoG,SAAU,SAAAL,GAAC,OAAI9F,EAAU8F,EAAEM,OAAOjF,UAEnC,cAAC,IAAD,8DAED,eAAC,IAAD,CAAac,GAAG,cAAhB,UACC,cAAC,IAAD,6BACA,cAAC,IAAD,CACCd,MAAK,OAAEX,QAAF,IAAEA,IAAc,GACrB2F,SAAU,SAAAL,GAAC,OAAIrF,EAAcqF,EAAEM,OAAOjF,UAEvC,cAAC,IAAD,6CAED,eAAC,IAAD,CAAac,GAAG,cAAhB,UACC,cAAC,IAAD,0BACA,cAAC,IAAD,CACCd,MAAK,OAAEd,QAAF,IAAEA,IAAW,GAClB8F,SAAU,SAAAL,GAAC,OAAIxF,EAAWwF,EAAEM,OAAOjF,UAEpC,cAAC,IAAD,qEAED,cAAC,IAAD,CAAQoD,KAAK,SAAb,wBAMS8B,EAAe,kBAC3B,cAAC,EAAD,UACC,cAAC,EAAD,OCjEaC,EARH,kBACV,eAAC,IAAD,WACE,cAAC,IAAD,CAAO1C,KAAK,YAAY2C,UAAWF,IACnC,cAAC,EAAD,CAAWzC,KAAK,UAAU2C,UAAWlB,IACrC,cAAC,EAAD,CAAWzB,KAAK,IAAI2C,UAAWjB,Q,SCJtBkB,EAAkB,SAAC,GAAD,IAAE9G,EAAF,EAAEA,SAAF,OAC9B,cAAC,IAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAc6B,KCVQ,sBDUtB,SACE7B,SEJC+G,GAAOC,SAASC,cAAc,OACpCF,GAAKxE,GAAK,OACVyE,SAASE,KAAKC,YAAYJ,IAE1BK,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJL,SAASM,eAAe,W","file":"static/js/main.138c2606.chunk.js","sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport { useEvent, useLocalStorage, useUpdate } from 'react-use';\n\nconst IpfsSettingsContext = React.createContext({});\n\nexport const useAppSettings = () => useContext(IpfsSettingsContext);\n\nexport const AppSettingsProvider = ({children}) => {\n\tconst [setup, setSetup, clearSetup] = useLocalStorage('setup');\n\tconst [apiUrl, setApiUrl, clearApiUrl] = useLocalStorage('ipfs-api-url');\n\tconst [gateway, setGateway, clearGateway] = useLocalStorage('ipfs-gateway', 'https://ipfs.io');\n\tconst [thumbor, setThumbor, clearThumbor] = useLocalStorage('thumbor-url');\n\tconst [rootFolder, setRootFolder, clearRootFolder] = useLocalStorage('galleries', '/galleries');\n\n\tconst update = useUpdate();\n\tuseEvent('storage', update, window);\n\n\tconst clear = useCallback(() => {\n\t\tclearSetup();\n\t\tclearApiUrl();\n\t\tclearRootFolder();\n\t\tclearThumbor();\n\t}, [clearSetup, clearApiUrl, clearRootFolder, clearThumbor]);\n\n\tconst context = {\n\t\tsetup, setSetup, clearSetup,\n\t\tapiUrl, setApiUrl, clearApiUrl,\n\t\tgateway, setGateway, clearGateway,\n\t\tthumbor, setThumbor, clearThumbor,\n\t\trootFolder, setRootFolder, clearRootFolder,\n\t\tclear,\n\t};\n\n\treturn (\n\t\t<IpfsSettingsContext.Provider value={context}>{children}</IpfsSettingsContext.Provider>\n\t)\n}\n","import React, { useContext, useEffect, useMemo } from 'react';\n// import IPFS from 'ipfs';\nimport ipfsHttpClient from 'ipfs-http-client';\nimport {useAsync} from 'react-use';\nimport { useAppSettings } from './AppSettingsProvider';\n\nexport const IpfsContext = React.createContext();\n\nexport const useIpfs = () => useContext(IpfsContext);\n\nexport const IpfsProvider = ({ children, repo }) => {\n\tconst { ipfsMode, setup, apiUrl } = useAppSettings();\n\t// const [loading, setLoading] = useState(true);\n\n\t// useEffect(() => {\n\n\t// }, [ipfsMode, setup, apiUrl]);\n\n\tconst state = useAsync( async () => {\n\t\tif (!setup){\n\t\t\treturn null;\n\t\t}\n\n\t\tif( apiUrl ) {\n\t\t\tconsole.info('connecting to remote node');\n\t\t\tconst client = await ipfsHttpClient({url: apiUrl});\n\n\t\t\tconst {id} = await client.id();\n\t\t\tconsole.log(`connected to ${id}`);\n\n\t\t\treturn client;\n\t\t}\n\t\t// else if(ipfsMode === 'local'){\n\t\t// \tconsole.info('starting local node');\n\n\t\t// \tconst client = await IPFS.create({\n\t\t// \t\tstart: true,\n\t\t// \t\trepo,\n\t\t// \t\tpreload: {\n\t\t// \t\t\tenabled: true\n\t\t// \t\t},\n\t\t// \t\tEXPERIMENTAL: {\n\t\t// \t\t\tpubsub: true,\n\t\t// \t\t},\n\t\t// \t\t// config: {\n\t\t// \t\t// \tAddresses: {\n\t\t// \t\t// \t\tSwarm: [\n\t\t// \t\t// \t\t\t// Use IPFS dev signal server\n\t\t// \t\t// \t\t\t// '/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star',\n\t\t// \t\t// \t\t\t// '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star',\n\t\t// \t\t// \t\t\t// Use IPFS dev webrtc signal server\n\t\t// \t\t// \t\t\t// '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/',\n\t\t// \t\t// \t\t\t// '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/',\n\t\t// \t\t// \t\t\t// '/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/',\n\t\t// \t\t// \t\t\t// Use local signal server\n\t\t// \t\t// \t\t\t// '/ip4/0.0.0.0/tcp/9090/wss/p2p-webrtc-star',\n\t\t// \t\t// \t\t]\n\t\t// \t\t// \t},\n\t\t// \t\t// }\n\t\t// \t});\n\n\t\t// \tconst { id } = await client.id();\n\t\t// \tconsole.log(`ipfs node id ${id}`);\n\n\t\t// \treturn client;\n\t\t// }\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}, [repo, apiUrl, ipfsMode, setup]);\n\n\tconst context = useMemo(() => ({\n\t\terror: state.error,\n\t\tloading: state.loading,\n\t\tipfs: state.value\n\t}), [state]);\n\n\tuseEffect(() => {\n\t\tif(!context.loading && window.ipfs !== context.ipfs){\n\t\t\twindow.ipfs = context.ipfs;\n\t\t}\n\t}, [context]);\n\n\treturn (\n\t\t<IpfsContext.Provider value={context}>\n\t\t\t{children}\n\t\t</IpfsContext.Provider>\n\t)\n}\n","import React from 'react';\nimport {Link, Route} from 'react-router-dom';\nimport { useIpfs } from '../providers/IpfsProvider';\n\nexport const IpfsRoute = ({children, direct = '/settings', ...props}) => {\n\tconst {loading, ipfs} = useIpfs();\n\n\tif(!ipfs){\n\t\tif(loading){\n\t\t\treturn (\n\t\t\t\t<h1>Setting up IPFS...</h1>\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<h1>looks like IPFS is not working</h1>\n\t\t\t\t\t<Link to={direct}>Go to settings</Link>\n\t\t\t\t</>\n\t\t\t)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Route {...props}>{children}</Route>\n\t)\n}\n","import React from 'react';\n\nimport {Link} from 'react-router-dom';\nimport {Button} from \"@chakra-ui/react\";\n\nexport const LinkButton = ({ children, ...props}) => (\n\t<Button as={Link} {...props}>{children}</Button>\n)\n","import React from 'react';\n\nimport {Box, Flex, Input, ButtonGroup} from '@chakra-ui/react'\nimport { LinkButton } from './link-button';\n\nexport const Header = () => (\n\t<Box as=\"nav\" w=\"100%\" padding=\"2\">\n\t\t<Flex justifyContent=\"space-between\">\n\t\t\t<ButtonGroup>\n\t\t\t\t<LinkButton to=\"/\">Home</LinkButton>\n\t\t\t\t<LinkButton to=\"/folder\">Browse</LinkButton>\n\t\t\t\t<LinkButton to=\"/settings\">Settings</LinkButton>\n\t\t\t</ButtonGroup>\n\t\t\t<form action=\"/watch\">\n\t\t\t\t<Input placeholder=\"youtube id\" name=\"v\"/>\n\t\t\t</form>\n\t\t</Flex>\n\t</Box>\n)\n","import React from 'react';\nimport { Header } from './Header';\n\nexport const PageContainer = ({children}) => (\n\t<>\n\t\t<Header/>\n\t\t<div>\n\t\t\t{children}\n\t\t</div>\n\t</>\n)\n","import React, { useMemo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useAsync } from 'react-use';\n\nimport Gallery from 'react-grid-gallery';\nimport { PageContainer } from '../../components/PageContainer.js';\nimport { useAppSettings } from '../../providers/AppSettingsProvider.js';\nimport { useIpfs } from '../../providers/IpfsProvider.js';\n\nconst CurrentFolder = React.createContext('');\nconst imageTypes = /\\.(jpg|jpeg|png)/i;\n\nexport const FolderPage = () => {\n\tconst { ipfs } = useIpfs();\n\tconst { pathname } = useLocation();\n\tconst { gateway, thumbor } = useAppSettings();\n\tconst path = pathname.replace(/^\\/folder/, '') || '/';\n\n\tconst {value: contents = [], loading, error} = useAsync(async () => {\n\t\tconst list = ipfs.files.ls(path);\n\n\t\tconst entries = [];\n\t\tfor await (let entry of list){\n\t\t\tentries.push(entry);\n\t\t}\n\t\treturn entries;\n\t}, [ipfs, path]);\n\n\tconst subFolders = useMemo(() => contents.filter(entry => entry.type === 'directory'), [contents]);\n\tconst files = useMemo(() => contents.filter(entry => entry.type === 'file'), [contents]);\n\tconst images = useMemo(() => {\n\t\treturn files\n\t\t\t.filter(file => imageTypes.test(file.name))\n\t\t\t.map(file => {\n\t\t\t\tconst src = `${gateway}/ipfs/${file.cid.toString()}`;\n\n\t\t\t\treturn ({\n\t\t\t\t\tsrc,\n\t\t\t\t\tthumbnail: thumbor ? `${thumbor}/unsafe/128x128/${encodeURIComponent(src)}` : null,\n\t\t\t\t\tthumbnailWidth: 1,\n\t\t\t\t\tthumbnailHeight: 1,\n\t\t\t\t})\n\t\t\t})\n\t}, [files]);\n\n\treturn (\n\t\t<CurrentFolder.Provider value={path}>\n\t\t\t<ul>\n\t\t\t\t{subFolders.map(dir => (\n\t\t\t\t\t<li key={dir.cid.toString()}>\n\t\t\t\t\t\t<Link to={`${pathname}/${dir.name}`}>{dir.name}</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t\t<Gallery images={images} enableImageSelection={false}/>\n\t\t</CurrentFolder.Provider>\n\t)\n}\n\nexport const FolderView = () => (\n\t<PageContainer>\n\t\t<FolderPage/>\n\t</PageContainer>\n)\n","import React from 'react';\n\nimport { useIpfsId } from '../hooks/use-ipfs-id';\nimport { PageContainer } from '../components/PageContainer.js';\n\nexport const HomeView = () => {\n\tconst {id} = useIpfsId();\n\n\treturn (\n\t\t<PageContainer>\n\t\t\t<h2>{id ? `IPFS id ${id.id}` : `connecting to ipfs...`}</h2>\n\t\t</PageContainer>\n\t)\n}\n","import { useAsync } from \"react-use\";\nimport { useIpfs } from \"../providers/IpfsProvider\";\n\nexport function useIpfsId(){\n\tconst {loading: loadingIpfs, ipfs} = useIpfs();\n\n\tconst {loading, value: id} = useAsync(async () => {\n\t\tif(ipfs){\n\t\t\treturn await ipfs.id();\n\t\t}\n\t}, [ipfs]);\n\n\treturn {\n\t\tloading: loadingIpfs || loading,\n\t\tid\n\t}\n}\n","import React, { useCallback, useState } from 'react';\n\nimport { Divider, Input, Button, FormControl, FormLabel, FormHelperText, Select, VStack } from '@chakra-ui/react';\nimport { useIpfs } from '../providers/IpfsProvider';\nimport { useAppSettings } from '../providers/AppSettingsProvider';\nimport { PageContainer } from '../components/PageContainer.js';\n\nexport const SettingsPage = () => {\n\tconst settings = useAppSettings();\n\n\tconst {loading: ipfsLoading} = useIpfs();\n\n\tconst [apiUrl, setApiUrl] = useState(settings.apiUrl);\n\tconst [rootFolder, setRootFolder] = useState(settings.rootFolder);\n\tconst [gateway, setGateway] = useState(settings.gateway);\n\tconst [thumbor, setThumbor] = useState(settings.thumbor);\n\n\tconst handleSubmit = useCallback((e) => {\n\t\te.preventDefault();\n\n\t\tsettings.setApiUrl(apiUrl);\n\t\tsettings.setGateway(gateway);\n\t\tsettings.setRootFolder(rootFolder);\n\t\tsettings.setThumbor(thumbor);\n\t\tsettings.setSetup(true);\n\t}, [apiUrl, settings, rootFolder, gateway, thumbor]);\n\n\tif(ipfsLoading){\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h1>Setting up IPFS...</h1>\n\t\t\t\t<Button onClick={settings.clear}>clear settings</Button>\n\t\t\t</>\n\t\t)\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<VStack spacing={2}>\n\t\t\t\t<FormControl id=\"gateway\">\n\t\t\t\t\t<FormLabel>IPFS Gateway</FormLabel>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={gateway ?? \"\"}\n\t\t\t\t\t\tonChange={e => setGateway(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormHelperText>The URL to the api endpoint of the IPFS node</FormHelperText>\n\t\t\t\t</FormControl>\n\t\t\t\t<Divider />\n\t\t\t\t<FormControl id=\"api-url\">\n\t\t\t\t\t<FormLabel>Ipfs Node Url</FormLabel>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={apiUrl ?? \"\"}\n\t\t\t\t\t\tonChange={e => setApiUrl(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormHelperText>The URL to the api endpoint of the IPFS node</FormHelperText>\n\t\t\t\t</FormControl>\n\t\t\t\t<FormControl id=\"root-folder\">\n\t\t\t\t\t<FormLabel>Galleries Path</FormLabel>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={rootFolder ?? \"\"}\n\t\t\t\t\t\tonChange={e => setRootFolder(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormHelperText>The root folder on the node</FormHelperText>\n\t\t\t\t</FormControl>\n\t\t\t\t<FormControl id=\"thumbor-url\">\n\t\t\t\t\t<FormLabel>Thumbor URL</FormLabel>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={thumbor ?? \"\"}\n\t\t\t\t\t\tonChange={e => setThumbor(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormHelperText>The URL to a thumbor server for resizing thumbnails</FormHelperText>\n\t\t\t\t</FormControl>\n\t\t\t\t<Button type=\"submit\">save</Button>\n\t\t\t</VStack>\n\t\t</form>\n\t)\n}\n\nexport const SettingsView = () => (\n\t<PageContainer>\n\t\t<SettingsPage/>\n\t</PageContainer>\n)\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { IpfsRoute } from '../components/IpfsRoute';\nimport { FolderView } from './Folder/index.js';\nimport { HomeView } from './Home';\nimport { SettingsView } from './Settings';\n\nconst App = () => (\n  <Switch>\n    <Route path=\"/settings\" component={SettingsView} />\n    <IpfsRoute path=\"/folder\" component={FolderView} />\n    <IpfsRoute path=\"/\" component={HomeView} />\n  </Switch>\n);\n\nexport default App;\n","import React from 'react';\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport { IPFS_REPO } from '../const';\nimport { IpfsProvider } from './IpfsProvider';\nimport { AppSettingsProvider } from './AppSettingsProvider';\n\nexport const GlobalProviders = ({children}) => (\n\t<ChakraProvider>\n\t\t<AppSettingsProvider>\n\t\t\t<IpfsProvider repo={IPFS_REPO}>\n\t\t\t\t{children}\n\t\t\t</IpfsProvider>\n\t\t</AppSettingsProvider>\n\t</ChakraProvider>\n);\n","export const IPFS_REPO = 'ipfs-gallery-viewer';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport App from './views/App';\nimport { GlobalProviders } from './providers/GlobalProviders';\n\nconst root = document.createElement('div');\nroot.id = 'root';\ndocument.body.appendChild(root);\n\nReactDOM.render(\n  <Router>\n    <GlobalProviders>\n      <App />\n    </GlobalProviders>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}